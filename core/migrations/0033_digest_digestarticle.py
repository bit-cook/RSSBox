# Generated by Django 5.2.5 on 2025-08-30 07:17

import autoslug.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0032_alter_tag_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Digest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='日报名称', max_length=255, verbose_name='名称')),
                ('description', models.TextField(blank=True, help_text='日报的详细描述', null=True, verbose_name='描述')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from='name', unique=True, verbose_name='URL别名')),
                ('generation_weekdays', models.JSONField(default=list, help_text='选择在哪些星期生成日报 (可多选)，格式: [1,2,3] 对应周一、周二、周三', verbose_name='生成日期')),
                ('agent_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('article_prompt', models.TextField(blank=True, default='You are a professional news analyst tasked with generating comprehensive analysis articles based on related news entries.\n\n        Article Requirements:\n        1. Title: Concise and powerful, reflecting the core theme\n        2. Clear Structure: Include timeline, key viewpoints, in-depth analysis, and impact assessment\n        3. Length: 200-300 words\n        4. Language: {target_language}\n        5. Style: Professional, objective, and insightful\n\n        Please generate an article based on the following news entries:\n\n        {articles_info}\n\n        Output format as JSON:\n        ```json\n        {\n        "title": "Article Title",\n        "summary": "Article summary (within 50 words)",\n        "content": "Complete article content (Markdown format)",\n        "keywords": ["keyword1", "keyword2", "keyword3"],\n        "reading_time": 2\n        }\n        ```', help_text='用于指导AI生成文章的提示词模板', null=True, verbose_name='文章生成提示词')),
                ('system_prompt', models.TextField(blank=True, default='You are a professional content analyst and writer who excels at integrating multiple related news stories into high-quality analytical articles.\n\n    Your articles have the following characteristics:\n    - Accurately extract core information\n    - Provide unique insights and analysis\n    - Clear structure and rigorous logic\n    - Concise language and powerful expression\n\n    Your role:\n    - Act as a senior journalist with extensive experience\n    - Focus on delivering objective, data-driven analysis\n    - Maintain professional standards while ensuring readability\n    - Synthesize information from multiple sources effectively', help_text='AI系统级别的指导提示词', null=True, verbose_name='系统提示词')),
                ('is_active', models.BooleanField(default=True, help_text='是否启用此日报的自动生成', verbose_name='是否激活')),
                ('last_generated', models.DateTimeField(blank=True, help_text='最后一次成功生成日报的时间', null=True, verbose_name='最后生成时间')),
                ('total_tokens', models.PositiveIntegerField(default=0, help_text='累计消耗的Token数量', verbose_name='总Token消耗')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('agent_content_type', models.ForeignKey(blank=True, help_text='用于生成文章的AI代理', null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype', verbose_name='AI代理类型')),
                ('tags', models.ManyToManyField(help_text='选择用于生成日报的标签', related_name='digests', to='core.tag', verbose_name='标签')),
            ],
            options={
                'verbose_name': '日报配置',
                'verbose_name_plural': '日报配置',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DigestArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from='title', unique_with=['digest', 'created_at__date'], verbose_name='URL别名')),
                ('summary', models.TextField(help_text='文章的简要摘要', verbose_name='摘要')),
                ('content', models.TextField(help_text='完整的文章内容，支持Markdown格式', verbose_name='内容')),
                ('cluster_id', models.IntegerField(help_text='BERTopic算法生成的聚类标识符', verbose_name='聚类ID')),
                ('cluster_keywords', models.JSONField(default=list, help_text='该聚类的关键词列表', verbose_name='聚类关键词')),
                ('quality_score', models.FloatField(default=0.0, help_text='文章质量评分 (0-1)', verbose_name='质量评分')),
                ('tokens_used', models.PositiveIntegerField(default=0, help_text='生成此文章消耗的Token数量', verbose_name='Token使用量')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('published', '已发布'), ('archived', '已归档')], default='draft', max_length=20, verbose_name='状态')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='发布时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('digest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='core.digest', verbose_name='所属日报')),
                ('source_entries', models.ManyToManyField(help_text='生成此文章的原始Entry条目', related_name='digest_articles', to='core.entry', verbose_name='来源文章')),
            ],
            options={
                'verbose_name': '日报文章',
                'verbose_name_plural': '日报文章',
                'ordering': ['-created_at'],
                'unique_together': {('digest', 'slug')},
            },
        ),
    ]
